<?php
/**
 * Add draggable blocks styles.
 *
*/
function _jquery_drag_drop_css() {
  $css_file = drupal_get_path('module', 'jquery_drag_drop') .'/jquery_drag_drop.css';
  drupal_add_css($css_file, 'module');
}

/**
 * Implementation of hook_init().
 *
 */
function jquery_drag_drop_init() {
  _jquery_drag_drop_css();
}

/**
 * Add draggable blocks sortable jquery scripts.
 *
*/
function _jquery_drag_drop_js() {
  global $theme_key;
  jquery_ui_add(array('ui.sortable'));

  init_theme();

  $regions = system_region_list($theme_key);

  $sortables = '';
  $connect_with = '';
  foreach($regions as $key => $value) {
    $connect_with = '';
    foreach($regions as $key2 => $value2) {
      if ($key2 != $key) {
        $connect_with .= '"#bloks-region-' . $key2 . '", ';
      }
      $serialize .= '$("#edit-' . $key2 . '").val($("#bloks-region-' . $key2 . '").sortable("serialize"));';
    }
    $sortables .= <<<EOT
    $("#bloks-region-$key").sortable({
        connectWith: [$connect_with],
        items:  'div.block',
        stop: function(event, ui) {
            $serialize
        }
    });
EOT;
  }


  drupal_add_js(<<<EOT
$(function() {
$sortables
}); 

EOT
    , 'inline'
  );
}

/**
 * Wrap blocks in own layer.
 *
 * Implementation of phptemplate_blocks().
 *
 */
function phptemplate_blocks($region) {
  $output = '';
  if(user_access('administer blocks')) {
    if(isset($_GET['edit_blocks']) && $_GET['edit_blocks']) {
      $output .= '<div id="bloks-region-' . $region . '" class="region-blocks">';
    }
  }
  if ($list = block_list($region)) {
    foreach ($list as $key => $block) {
      // $key == <i>module</i>_<i>delta</i>
      $output .= theme('block', $block);
    }
  }
  if(user_access('administer blocks')) {
    if(isset($_GET['edit_blocks']) && $_GET['edit_blocks']) {
      $output .= '</div>';
    }
  }
  // Add any content assigned to this region through drupal_set_content() calls.
  $output .= drupal_get_content($region);

  return $output;
}

/**
 * Implementation of form with hidden fields for saving sortable blocks.
 *
 */
function save_block_position() {
  global $theme_key;
  init_theme();

  $regions = system_region_list($theme_key);
  $form = array();
  foreach($regions as $key => $region) {
    $form[$key] = array('#type' => 'hidden');
  }

  $form['submit'] = array('#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['cancel'] = array('#type' => 'markup',
    '#value' => l(t('Cancel'), $_GET['q']),
  );

  return $form;
}

/**
 * Save blocks positions.
 */
function save_block_position_submit($form, &$form_state) {
  global $theme_key;
  init_theme();
  $regions = system_region_list($theme_key);
  $values = $form_state['values'];
  foreach($regions as $region => $region_name) {
    if(!empty($values[$region])) {
      $region_blocks = explode('&', $values[$region]);
      foreach ($region_blocks as $weight => $block) {
        $block_p = explode('=', $block);
        db_query("UPDATE {blocks} SET region = '%s', weight = '%s' WHERE module = '%s' AND delta = '%s' AND theme = '%s'", $region, $weight, str_replace('block-', '', str_replace('[]', '', $block_p[0])), $block_p[1], $theme_key);
      }
    }
  }
}

/**
 * Implementation of hook_preprocess_page().
 *
 * Add blocks editing pages
 */
function jquery_drag_drop_preprocess_page(&$vars) {
  if(user_access('administer blocks')) {
    if(isset($_GET['edit_blocks']) && $_GET['edit_blocks']) {
      _jquery_drag_drop_js();
      $form_block_editing = drupal_get_form('save_block_position');
      $vars['header'] .= $form_block_editing;
    } else {
      $vars['header'] .= '<div id="edit_blocks_wrapper"><a href="' . url($_GET['q'], array('query' => array('edit_blocks' => true))) . '" id="edit_blocks">Edit Blocks</a></div>';
    }
  }
}